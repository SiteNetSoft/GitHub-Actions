name: Run multiple tests types, Python versions and on multiple OSs

on:
  workflow_call:
    inputs:
      debug:
        description: 'Debug mode'
        type: boolean
        required: false
        default: false

jobs:
  build_on_ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11' ]
        python-release: [ '3.10.12', '3.11.4' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python build dependencies (Debian-based)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            zlib1g-dev \
            libncurses5-dev \
            libgdbm-dev \
            libnss3-dev \
            libssl-dev \
            libreadline-dev \
            libffi-dev \
            curl \
            libbz2-dev

      - name: Download and compile Python
        run: |
          curl -O https://www.python.org/ftp/python/${{ matrix.python-release }}/Python-${{ matrix.python-release }}.tgz
          tar -xvf Python-${{ matrix.python-release }}.tgz
          cd Python-${{ matrix.python-release }}
          ./configure --enable-optimizations
          make
          sudo make altinstall

      - name: Install dependencies
        run: |
          sudo python${{ matrix.python-version }} -m pip install --upgrade pip
          sudo python${{ matrix.python-version }} -m pip install poetry
          python${{ matrix.python-version }} -m poetry config virtualenvs.create false
          python${{ matrix.python-version }} -m poetry install --no-root --no-dev

      - name: Run unit tests
        run: |
          python${{ matrix.python-version }} -m unittest discover -s tests/ -p "test_*.py"

      - name: Run lint test
        run: |
          python${{ matrix.python-version }} -m poetry run flake8 . --exclude venv/

  build_on_rocky:
    runs-on: ubuntu-latest
    container: rockylinux/rockylinux:latest
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11' ]
        python-release: [ '3.10.12', '3.11.4' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python build dependencies (Rocky)
        run: |
          yum install -y \
            gcc \
            openssl-devel \
            bzip2-devel \
            libffi-devel \
            zlib-devel \
            ncurses-devel \
            gdbm-devel \
            xz-devel \
            readline-devel \
            sqlite-devel \
            make \
            findutils

      - name: Download and compile Python
        run: |
          curl -O https://www.python.org/ftp/python/${{ matrix.python-release }}/Python-${{ matrix.python-release }}.tgz
          tar -xvf Python-${{ matrix.python-release }}.tgz
          cd Python-${{ matrix.python-release }}
          ./configure --enable-optimizations
          make
          sudo make altinstall

      - name: Install dependencies
        run: |
          python${{ matrix.python-version }} -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev

      - name: Run unit tests
        run: |
          python${{ matrix.python-version }} -m unittest discover -s tests/ -p "test_*.py"

      - name: Run lint test
        run: |
          poetry run flake8 . --exclude venv/

  build_on_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11' ]
        python-release: [ '3.10.12', '3.11.4' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python build dependencies (MacOS)
        run: |
          brew install openssl readline
          echo 'export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/usr/local/opt/readline/bin:$PATH"' >> ~/.bash_profile
          echo 'export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib -L/usr/local/opt/readline/lib"' >> ~/.bash_profile
          echo 'export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include -I/usr/local/opt/readline/include"' >> ~/.bash_profile
          echo 'export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig:/usr/local/opt/readline/lib/pkgconfig"' >> ~/.bash_profile
          source ~/.bash_profile

      - name: Download and compile Python
        run: |
          curl -O https://www.python.org/ftp/python/${{ matrix.python-release }}/Python-${{ matrix.python-release }}.tgz
          tar -xvf Python-${{ matrix.python-release }}.tgz
          cd Python-${{ matrix.python-release }}
          ./configure --enable-optimizations
          make
          sudo make altinstall

      #- name: Install Poetry
      #  run: |
      #    curl -sSL https://install.python-poetry.org | python${{ matrix.python-version }} -
      #    echo "/Library/Frameworks/Python.framework/Versions/${{ matrix.python-version }}/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          python${{ matrix.python-version }} -m pip install --upgrade pip
          python${{ matrix.python-version }} -m pip install poetry
          python${{ matrix.python-version }} poetry config virtualenvs.create false
          python${{ matrix.python-version }} poetry install --no-root --no-dev

      - name: Run unit tests
        run: |
          python${{ matrix.python-version }} -m unittest discover -s tests/ -p "test_*.py"

      - name: Run lint test
        run: |
          python${{ matrix.python-version }} -m poetry run flake8 . --exclude venv/

  build_on_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11' ]
        python-release: [ '3.10.12', '3.11.4' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python build dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install openssl.light
          choco install vcpython27
          refreshenv

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python${{ matrix.python-version }} -m pip install --upgrade pip
          python${{ matrix.python-version }} -m pip install poetry
          python${{ matrix.python-version }} -m poetry config virtualenvs.create false
          python${{ matrix.python-version }} -m poetry install --no-root --no-dev

      - name: Run unit tests
        run: |
          python${{ matrix.python-version }} -m unittest discover -s tests/ -p "test_*.py"

      - name: Run lint test
        run: |
          poetry run flake8 . --exclude venv/